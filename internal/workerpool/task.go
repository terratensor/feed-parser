package workerpool

import (
	"context"
	"fmt"
	"log"
	"log/slog"
	"os"
	"strings"
	"time"

	"github.com/terratensor/feed-parser/internal/config"
	"github.com/terratensor/feed-parser/internal/crawler"
	"github.com/terratensor/feed-parser/internal/entities/feed"
	"github.com/terratensor/feed-parser/internal/lib/logger/sl"
	"github.com/terratensor/feed-parser/internal/metrics"
	"github.com/terratensor/feed-parser/internal/splitter"
	"github.com/terratensor/feed-parser/internal/storage/manticore"
)

/**
Task —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏.
–ú—ã –ø–µ—Ä–µ–¥–∞–µ–º –µ–π Data –∏ —Ñ—É–Ω–∫—Ü–∏—é f, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ process.
–§—É–Ω–∫—Ü–∏—è f –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Data –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∞ —Ç–∞–∫–∂–µ —Ö—Ä–∞–Ω–∏–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—É—é –æ—à–∏–±–∫—É
*/

type Task struct {
	Err error
	//Entries *feed.Entries
	Data           *feed.Entry
	f              func(interface{}) error
	Splitter       splitter.Splitter
	EntriesStorage *feed.Entries
	Config         *config.Config
	metrics        *metrics.Metrics
}

func NewTaskStorage() *feed.Entries {
	var storage feed.StorageInterface

	manticoreClient, err := manticore.New("feed")
	if err != nil {
		log.Printf("failed to initialize manticore client, %v", err)
		os.Exit(1)
	}

	storage = manticoreClient

	return feed.NewFeedStorage(storage)
}

func NewTask(f func(interface{}) error, data feed.Entry, splitter *splitter.Splitter, storage *feed.Entries, cfg *config.Config, metrics *metrics.Metrics) *Task {
	return &Task{
		f:              f,
		Data:           &data,
		Splitter:       *splitter,
		EntriesStorage: storage,
		Config:         cfg,
		metrics:        metrics,
	}
}

func process(workerID int, task *Task) {
	fmt.Printf("Worker %d processes task %v\n", workerID, task.Data.Url)

	logger := slog.New(
		slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelDebug}),
	)

	store := task.EntriesStorage

	e := task.Data
	cfg := task.Config
	metrics := task.metrics

	var createdEntry feed.Entry

	dbe, err := store.Storage.FindAllByUrl(context.Background(), task.Data.Url)
	if err != nil {
		logger.Error("failed find entry by url", sl.Err(err))
	}

	// –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
	if dbe == nil || len(dbe) == 0 {

		e, err = visitUrl(e, cfg, metrics)
		if err != nil {
			log.Printf("finishing task processing without inserting data in manticoresearch, %v", err)
			return
		}

		// —Ä–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏
		splitEntries := task.Splitter.SplitEntry(context.Background(), *e)
		// –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å—Ä–µ–∑—É —á–∞—Å—Ç–µ–π –∏ –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –≤ –ë–î
		for _, splitEntry := range splitEntries {
			err = insertNewEntry(&splitEntry, store.Storage, *logger)
			if err != nil {
				return
			}
		}
		createdEntry = *e
		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–æ–ª-–≤–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
		metrics.EntitiesInserted.WithLabelValues(e.Url, fmt.Sprintf("%d", len(splitEntries))).Inc()
	} else {
		if needUpdate(&dbe[0], *e) {
			log.Printf("—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∫–æ–ª-–≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –ë–î:, %v", len(dbe))
			e, err = visitUrl(e, cfg, metrics)
			if err != nil {
				log.Printf("finishing task processing without updating data in manticoresearch %v", err)
				return
			}

			splitEntries := task.Splitter.SplitEntry(context.Background(), *e)

			for n, splitEntry := range splitEntries {
				// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º created –¥–∞—Ç—É –∏–∑ –ë–î, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω 0
				splitEntry.Created = dbe[0].Created

				timeNow := time.Unix(time.Now().Unix(), 0)
				splitEntry.UpdatedAt = &timeNow
				// –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞ –ú–ò–î –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —è–∑—ã–∫–æ–≤
				if e.ResourceID == 2 && (e.Language == "de" || e.Language == "fr" || e.Language == "pt" || e.Language == "es") {
					e.Published = dbe[0].Published
				}
				// –ø–æ–∫–∞ n –º–µ–Ω—å—à–µ, —á–µ–º –≤—Å–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
				if n < len(dbe) {
					splitEntry.ID = dbe[n].ID
					err = updateOldEntry(&splitEntry, store.Storage, *logger)
					if err != nil {
						return
					}
				} else {
					err = insertNewEntry(&splitEntry, store.Storage, *logger)
					if err != nil {
						return
					}
				}
				// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–æ–ª-–≤–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
				metrics.EntitiesUpdated.WithLabelValues(e.Url, fmt.Sprintf("%d", len(splitEntries))).Inc()
			}
		} else {
			//log.Printf("nothing to insert, ‚åõ waiting incoming tasks‚Ä¶")
		}
	}

	task.Err = task.f(createdEntry)
}

func updateOldEntry(e *feed.Entry, store feed.StorageInterface, logger slog.Logger) error {
	log.Printf("before update url: %v, updated: %v", e.Url, e.Updated)
	err := store.Update(context.Background(), e)
	if err != nil {
		logger.Error(
			"failed update entry",
			slog.String("url", e.Url),
			sl.Err(err),
		)
		return err
	} else {
		logger.Info(
			"entry successful updated",
			slog.Int64("id", *e.ID),
			slog.String("url", e.Url),
		)
	}
	return nil
}

func insertNewEntry(e *feed.Entry, store feed.StorageInterface, logger slog.Logger) error {
	id, err := store.Insert(context.Background(), e)
	if err != nil {
		logger.Error(
			"failed insert entry",
			slog.String("url", e.Url),
			sl.Err(err),
		)
		return err
	}
	logger.Info(
		"entry successful inserted",
		slog.Int64("id", *id),
		slog.String("url", e.Url),
	)
	return nil
}

// visitUrl –≤—ã–∑—ã–≤–∞–µ—Ç crawler, –∫–æ—Ç–æ—Ä—ã–π –ø–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ,
// –µ—Å–ª–∏ crawler –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ read: connection reset by peer,
// —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º —Ä–∞–∑–æ—Ä–≤–∞–ª–æ—Å—å, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å—å entry –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
// –µ—Å–ª–∏ crawler –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—É—é —Å–ø–∞—Ä—Å–µ–Ω–Ω—É—é entry (ce), —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é entry
func visitUrl(e *feed.Entry, cfg *config.Config, metrics *metrics.Metrics) (*feed.Entry, error) {

	// –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
	crawlerConfig, err := GetCrawlerConfigByResourceID(cfg, e.ResourceID, e.Language)
	if err != nil {
		return nil, fmt.Errorf("error getting crawler config: %v", err)
	}

	switch e.ResourceID {
	case 2:
		ce, err := crawler.VisitMid(e, crawlerConfig, metrics)
		if err != nil {
			return nil, err
		}
		return ce, nil
	case 3:
		ce, err := crawler.VisitMil(e, crawlerConfig, metrics)
		if err != nil {
			return e, nil
		}
		return ce, nil
	}

	return e, nil
}

func needUpdate(dbe *feed.Entry, e feed.Entry) bool {
	// –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –±–∞–∑–µ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
	// –ë—ã–ª–æ –∑–∞–º–µ—á–µ–Ω–æ, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ —Å —Å–∞–π—Ç–∞ –ú–û –∑–∞–ø–∏—Å–∏ –ø–æ–ø–∞–¥–∞—é—Ç —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	// –•–æ—Ç—è –ø–æ–∑–∂–µ –ø—Ä–æ–≤–µ—Ä—è –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–Ω–æ, —á—Ç–æ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
	// –Ω–æ —Ç.–∫. –Ω–∞ –ª–µ–Ω—Ç–µ –ú–û –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π, –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
	// –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∏
	if len(strings.TrimSpace(dbe.Title)) == 0 {
		log.Printf("WARRNING! Title was empty, UPDATING entry %v", dbe.Url)
		return true
	}
	// –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±–∞–∑–µ –ø—É—Å—Ç–æ–π, –∏ —ç—Ç–æ –Ω–µ —Å–∞–π—Ç kremlin.ru, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
	if len(strings.TrimSpace(dbe.Content)) == 0 && dbe.ResourceID != 1 {
		log.Printf("WARRNING! Content was empty, UPDATING entry %v", dbe.Url)
		return true
	}
	// –µ—Å–ª–∏ –ø–æ–ª–µ updated nil, –∑–Ω–∞—á–∏—Ç –≤ –ª–µ–Ω—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏ –∑–Ω–∞—á–∏—Ç –º—ã –Ω–µ –º–æ–∂–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
	// –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ø–æ–ª—è, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
	if dbe == nil || e.Updated == nil {
		return false
	}

	// –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –∫ –Ω—É–∂–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ—Å—É—Ä—Å–∞.
	// GMT+4 –Ω–∞ —Å–∞–π—Ç–µ –ö—Ä–µ–º–ª—è, GMT+3 –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö.
	var loc *time.Location
	var dbeTime, eTime time.Time
	if dbe.ResourceID == 1 {
		loc, _ = time.LoadLocation("Etc/GMT-4")
		dbeTime = dbe.Updated.In(loc)
		eTime = e.Updated.In(loc)
	} else {
		loc, _ = time.LoadLocation("Etc/GMT-3")
		dbeTime = dbe.Updated.In(loc)
		eTime = e.Updated.In(loc)
	}

	if dbeTime != eTime && dbe.ResourceID != 2 {
		log.Printf("Url %v `updated` fields do not match dbe updated %v, e: %v", dbe.Url, dbeTime, eTime)
		return true
	}

	//–î–ª—è –ª–µ–Ω—Ç—ã —Å–∞–π—Ç–∞ mid language ru. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
	if dbe.Language == "ru" {
		if dbeTime.Add(6*time.Hour).Sub(eTime) <= 0 && dbe.ResourceID == 2 {
			log.Printf("dbeTime.Add(1*time.Hour).Sub(eTime) <= 0 && RID == 2, lang %v", dbe.Language)
			log.Printf("üö© Url %v updated. DB time %v, current time: %v ", dbe.Url, dbeTime, eTime)
			return true
		}
	}
	//–î–ª—è –ª–µ–Ω—Ç—ã —Å–∞–π—Ç–∞ mid language en. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
	if dbe.Language == "en" {
		if dbeTime.Add(6*time.Hour).Sub(eTime) <= 0 && dbe.ResourceID == 2 {
			log.Printf("dbeTime.Add(6*time.Hour).Sub(eTime) <= 0 && RID == 2, lang %v", dbe.Language)
			log.Printf("üö© Url %v updated. DB time %v, current time: %v ", dbe.Url, dbeTime, eTime)
			return true
		}
	}
	//–î–ª—è –ª–µ–Ω—Ç—ã —Å–∞–π—Ç–∞ mid language de,fr,ed,pt. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
	if dbe.Language == "de" || dbe.Language == "fr" || dbe.Language == "es" || dbe.Language == "pt" {
		if dbeTime.Add(24*time.Hour).Sub(eTime) <= 0 && dbe.ResourceID == 2 {
			log.Printf("dbeTime.Add(24*time.Hour).Sub(eTime) <= 0 && RID == 2, lang %v", dbe.Language)
			log.Printf("üö© Url %v updated. DB time %v, current time: %v ", dbe.Url, dbeTime, eTime)
			return true
		}
	}

	return false
}

func GetCrawlerConfigByResourceID(cfg *config.Config, resourceID int, lang string) (*config.Crawler, error) {
	for _, parser := range cfg.Parsers {
		if parser.ResourceID == resourceID && parser.Lang == lang {
			return &parser.Crawler, nil
		}
	}
	return nil, fmt.Errorf("crawler config not found for resource_id: %d and lang: %s", resourceID, lang)
}
